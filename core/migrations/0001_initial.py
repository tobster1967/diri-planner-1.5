# Generated by Django 5.2.7 on 2025-10-24 15:53

import django.db.models.deletion
import treenode.models.mixins.properties
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Attribute",
            fields=[
                (
                    "priority",
                    models.PositiveIntegerField(default=0, verbose_name="priority"),
                ),
                ("_path", models.TextField(default="", editable=False)),
                ("_depth", models.PositiveIntegerField(default=0, editable=False)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Unique slug identifier (auto-generated from name)",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the attribute", max_length=255),
                ),
                (
                    "value",
                    models.TextField(blank=True, help_text="Value of the attribute"),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("date", "Date"),
                            ("datetime", "DateTime"),
                            ("json", "JSON"),
                        ],
                        default="string",
                        help_text="Data type of the attribute value",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this attribute represents",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this attribute is active"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata for the attribute",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.attribute",
                        verbose_name="parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attribute",
                "verbose_name_plural": "Attributes",
                "ordering": ["_path"],
            },
            bases=(
                treenode.models.mixins.properties.TreeNodePropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "priority",
                    models.PositiveIntegerField(default=0, verbose_name="priority"),
                ),
                ("_path", models.TextField(default="", editable=False)),
                ("_depth", models.PositiveIntegerField(default=0, editable=False)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Unique slug identifier (auto-generated from name)",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the application.", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the application."
                    ),
                ),
                (
                    "properties",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional properties for extensibility.",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.application",
                        verbose_name="parent",
                    ),
                ),
                (
                    "attributes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Attributes associated with this application.",
                        related_name="applications",
                        to="core.attribute",
                    ),
                ),
            ],
            options={
                "verbose_name": "Application",
                "verbose_name_plural": "Applications",
                "ordering": ["_path"],
            },
            bases=(
                treenode.models.mixins.properties.TreeNodePropertiesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "priority",
                    models.PositiveIntegerField(default=0, verbose_name="priority"),
                ),
                ("_path", models.TextField(default="", editable=False)),
                ("_depth", models.PositiveIntegerField(default=0, editable=False)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this record",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Unique slug identifier (auto-generated from name)",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when this record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this record was last updated",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the organisation.", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the organisation.",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="Short code or abbreviation for the organisation.",
                        max_length=50,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Contact email for the organisation.",
                        max_length=254,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Contact phone number for the organisation.",
                        max_length=50,
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="Physical address of the organisation."
                    ),
                ),
                (
                    "website",
                    models.URLField(
                        blank=True, help_text="Website URL of the organisation."
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this organisation is active."
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata for the organisation.",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.organisation",
                        verbose_name="parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organisation",
                "verbose_name_plural": "Organisations",
                "ordering": ["_path"],
            },
            bases=(
                treenode.models.mixins.properties.TreeNodePropertiesMixin,
                models.Model,
            ),
        ),
        migrations.AddIndex(
            model_name="attribute",
            index=models.Index(fields=["slug"], name="core_attrib_slug_f4f0cd_idx"),
        ),
        migrations.AddIndex(
            model_name="attribute",
            index=models.Index(
                fields=["is_active"], name="core_attrib_is_acti_acd89f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="attribute",
            index=models.Index(
                fields=["_path"],
                name="idx_attribute_path_ops",
                opclasses=["text_pattern_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(fields=["slug"], name="core_applic_slug_45bbcd_idx"),
        ),
        migrations.AddIndex(
            model_name="application",
            index=models.Index(
                fields=["_path"],
                name="idx_application_path_ops",
                opclasses=["text_pattern_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="organisation",
            index=models.Index(fields=["slug"], name="core_organi_slug_3088b1_idx"),
        ),
        migrations.AddIndex(
            model_name="organisation",
            index=models.Index(fields=["code"], name="core_organi_code_9f8e4f_idx"),
        ),
        migrations.AddIndex(
            model_name="organisation",
            index=models.Index(
                fields=["is_active"], name="core_organi_is_acti_bff167_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organisation",
            index=models.Index(
                fields=["_path"],
                name="idx_organisation_path_ops",
                opclasses=["text_pattern_ops"],
            ),
        ),
    ]
